{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","channel","Pusher","cluster","forceTLS","subscribe","bind","data","t","transaction","document","getElementById","concat","lotId","innerHTML","id","participant","console","log","disabled","this","countFromFive","Axios","post","value","then","response","catch","err","transactionId","delete","timerId","count","interval","setInterval","setTimeout","clearInterval","react_default","a","createElement","className","type","onMouseDown","startBid","onMouseUp","cancelBid","hidden","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b033842.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport Axios from 'axios';\nimport Pusher from 'pusher-js'\n\nclass App extends Component {\n  componentDidMount () {\n    const pusher = new Pusher('a8ee0fa5cc66b88f3a48', {\n      cluster: 'us2',\n      forceTLS: true\n    });\n    let component = this\n    const channel = pusher.subscribe('my-channel');\n    channel.bind('new-transaction', (data) => {\n      let t = data.transaction\n      let messages = document.getElementById(`messages${t.lotId}`)\n      messages.innerHTML += `<div id=\"transaction${t.id}\">${t.participant} is pushing</div>`\n    });\n    channel.bind('transaction-canceled', (data) => {\n      console.log('pusher transaction-canceled', data)\n      document.getElementById(`transaction${data.transaction.id}`).innerHTML = ''\n    });\n    channel.bind('adquisition-confirmed', (data) => {\n      console.log('pusher adquisition-confirmed', data)\n      // bloquear el boton de adquirir\n      let t = data.transaction\n      document.getElementById(`btn${t.lotId}`).disabled = true\n      // borrar lista de pusheantes\n      // agregar mensaje de quien es el ganador de ese lote\n      document.getElementById(`messages${t.lotId}`).innerHTML = `Comprada por ${t.participant}`\n    });\n  }\n  startBid(lotId) {\n    console.log('started', lotId)\n    this.countFromFive(`timer${lotId}`)\n    Axios.post('https://pusher-node-auction--ralexrdz.repl.co/transactions', {\n      participant: document.getElementById('me').value,\n      lotId: lotId\n    }).then(response => { \n      document.getElementById(`myTransaction${lotId}`).value = response.data.transaction.id\n      console.log('post transaction', response) \n    }).catch(err => { console.log(err) })\n  }\n  cancelBid(lotId) {\n    console.log('canceled', lotId)\n    let transactionId = document.getElementById(`myTransaction${lotId}`).value\n    console.log(transactionId)\n    Axios.delete(`https://pusher-node-auction--ralexrdz.repl.co/transactions/${transactionId}`)\n    .then(response => { console.log('delete transaction', response) })\n    .catch(err => { console.log(err) })\n  }\n  countFromFive (timerId) {\n    let count = 5\n    document.getElementById(timerId).innerHTML = count\n    let interval = setInterval(() => {\n      count--\n      document.getElementById(timerId).innerHTML = count\n    }, 1000)\n    setTimeout(() => {\n      clearInterval(interval)\n      document.getElementById(timerId).innerHTML = ''\n    }, 5000)\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div>quien eres? <input id=\"me\" type=\"text\"/></div>\n        <div className=\"lote\">\n          Lote 1 \n          <button id=\"btn1\" onMouseDown={this.startBid.bind(this, 1)} onMouseUp={this.cancelBid.bind(this, 1)}>Adquirir</button>\n          <div id=\"timer1\"></div>\n          <div id=\"messages1\"></div>\n          <input id=\"myTransaction1\" type=\"text\" hidden/>\n        </div>\n        <div className=\"lote\">\n          Lote 2 \n          <button id=\"btn2\" onMouseDown={this.startBid.bind(this, 2)} onMouseUp={this.cancelBid.bind(this, 2)}>Adquirir</button>\n          <div id=\"timer2\"></div>\n          <div id=\"messages2\"></div>\n          <input id=\"myTransaction2\" type=\"text\" hidden/>\n        </div>\n        <div className=\"lote\">\n          Lote 3 \n          <button id=\"btn3\" onMouseDown={this.startBid.bind(this, 3)} onMouseUp={this.cancelBid.bind(this, 3)}>Adquirir</button>\n          <div id=\"timer3\"></div>\n          <div id=\"messages3\"></div>\n          <input id=\"myTransaction3\" type=\"text\" hidden/>\n        </div>\n        <div className=\"lote\">\n          Lote 4 \n          <button id=\"btn4\" onMouseDown={this.startBid.bind(this, 4)} onMouseUp={this.cancelBid.bind(this, 4)}>Adquirir</button>\n          <div id=\"timer4\"></div>\n          <div id=\"messages4\"></div>\n          <input id=\"myTransaction4\" type=\"text\" hidden/>\n        </div>\n        <div className=\"lote\">\n          Lote 5 \n          <button id=\"btn5\" onMouseDown={this.startBid.bind(this, 5)} onMouseUp={this.cancelBid.bind(this, 5)}>Adquirir</button>\n          <div id=\"timer5\"></div>\n          <div id=\"messages5\"></div>\n          <input id=\"myTransaction5\" type=\"text\" hidden/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}